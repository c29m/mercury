namespace Mercury.Specs

import System
import System.Collections.Generic
import Boo.Lang.Compiler
import Boo.Lang.Compiler.Ast
import Machine.Specifications
import Machine.Specifications.NUnitShouldExtensionMethods from Machine.Specifications.NUnit
import Mercury.Core

public class when_there_are_two_behaviors_and_the_second_behavior_adds_onto_a_value_that_was_stored_in_the_temp_data_by_the_first(BehaviorSpecs):
  should_have_the_value_be_the_sum_of_what_the_two_behaviors_contributed_to_it as It

public class when_there_are_two_enlisted_behaviors_and_specifying_that_the_second_behavior_must_be_executed_after_the_first_one(BehaviorSpecs):
  should_only_run_the_second_behavior_after_the_first_behavior as It

public class when_there_are_two_enlisted_behaviors_and_specifying_that_the_second_behavior_must_be_executed_before_the_first_one(BehaviorSpecs):
  should_only_run_the_second_behavior_before_the_first_behavior as It

public class when_enlisting_a_behavior_to_run_before_an_action(BehaviorSpecs):
  should_appear_in_the_collection_of_behaviors_that_will_run_before_an_action as It

public class when_enlisting_a_behavior_to_run_after_an_action(BehaviorSpecs):
  should_appear_in_the_collection_of_behaviors_to_will_run_after_an_action as It

public class when_sorting_a_group_of_four_enlisted_behaviors_into_groups_that_run_before_and_after_an_action_and_there_are_three_actions_that_run_before_and_one_action_that_runs_after(BehaviorSpecs):
  should_have_three_behaviors_in_the_group_of_behaviors_set_to_run_before_an_action as It
  should_have_one_behavior_in_the_group_of_behaviors_set_to_run_after_an_action as It

public class when_having_two_specified_behaviors_and_one_of_the_behaviors_is_enlisted_to_run_before_an_action(BehaviorSpecs):
  should_have_only_the_enlisted_behavior_appear_as_being_set_to_run_before_an_action as It

public class when_having_one_behavior_enlisted_to_run_before_an_action_and_one_behavior_enlisted_to_run_after_an_action_and_one_behavior_must_be_executed_after_the_other(BehaviorSpecs):
  should_raise_an_error_indicating_that_these_behaviors_cannot_depend_on_each_other as It

public class when_two_behaviors_are_specified_and_one_must_be_executed_after_the_other_and_the_second_in_sequence_behavior_is_not_enlisted_while_the_first_behavior_is(BehaviorSpecs):
  should_allow_the_behavior_to_be_enlisted as It

public class BehaviorSpecs:
  context as Establish = def():
    pass